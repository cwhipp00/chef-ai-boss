import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { 
  Wand2, 
  CheckCircle, 
  Clock, 
  BookOpen,
  Loader2,
  AlertCircle,
  Users,
  Star,
  Brain,
  Zap,
  RefreshCw
} from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface Course {
  id: string;
  title: string;
  description: string;
  instructor_name: string;
  difficulty_level: string;
  duration_hours: number;
  category: string;
  tags: string[];
  is_featured: boolean;
  lesson_count: number;
}

export const AutoLessonGenerator: React.FC = () => {
  const [coursesWithoutLessons, setCoursesWithoutLessons] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationResults, setGenerationResults] = useState<any>(null);

  useEffect(() => {
    fetchCoursesWithoutLessons();
  }, []);

  const fetchCoursesWithoutLessons = async () => {
    try {
      // Get all courses and their lesson counts
      const { data: allCourses, error } = await supabase
        .from('courses')
        .select(`
          id, title, description, instructor_name, difficulty_level, 
          duration_hours, category, tags, is_featured,
          lesson_count:lessons(count)
        `);

      if (error) throw error;

      // Filter courses that have no lessons
      const emptyLessonCourses = allCourses?.filter(course => 
        !course.lesson_count || course.lesson_count[0]?.count === 0
      ).map(course => ({
        ...course,
        lesson_count: 0
      })) || [];

      setCoursesWithoutLessons(emptyLessonCourses);
    } catch (error) {
      console.error('Error fetching courses:', error);
      toast.error('Failed to load courses without lessons');
    } finally {
      setLoading(false);
    }
  };

  const generateAllLessons = async () => {
    if (isGenerating) return;
    
    setIsGenerating(true);
    setGenerationResults(null);
    
    try {
      toast.info('ðŸ§  Starting automatic lesson generation with Gemini AI...');
      
      const { data, error } = await supabase.functions.invoke('auto-generate-lessons', {
        body: {}
      });

      setIsGenerating(false);

      if (error) {
        throw error;
      }

      setGenerationResults(data);
      
      if (data.successfullyGenerated > 0) {
        toast.success(`ðŸŽ‰ Successfully generated lessons for ${data.successfullyGenerated} courses!`);
        // Refresh the course list
        fetchCoursesWithoutLessons();
      } else {
        toast.warning('No new lessons were generated. Check the results for details.');
      }

      if (data.errors && data.errors.length > 0) {
        toast.error(`${data.errors.length} courses had errors during generation`);
      }

    } catch (error: any) {
      console.error('Error generating lessons:', error);
      toast.error(`Failed to generate lessons: ${error.message}`);
      setIsGenerating(false);
    }
  };

  const getDifficultyColor = (level: string) => {
    switch (level) {
      case 'beginner': return 'bg-green-500/10 text-green-600 border-green-500/20';
      case 'intermediate': return 'bg-yellow-500/10 text-yellow-600 border-yellow-500/20';
      case 'advanced': return 'bg-red-500/10 text-red-600 border-red-500/20';
      default: return 'bg-muted/10 text-muted-foreground border-muted/20';
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center space-y-4">
          <RefreshCw className="w-8 h-8 animate-spin mx-auto text-primary" />
          <p className="text-muted-foreground">Scanning for courses without lessons...</p>
        </div>
      </div>
    );
  }

  if (coursesWithoutLessons.length === 0 && !generationResults) {
    return (
      <Card className="max-w-4xl mx-auto">
        <CardContent className="p-12 text-center">
          <CheckCircle className="w-16 h-16 mx-auto mb-4 text-green-500" />
          <h3 className="text-2xl font-bold mb-2">All Courses Have Lessons!</h3>
          <p className="text-muted-foreground mb-4">
            Every course in ChefAI University now has comprehensive lessons generated by Gemini AI.
          </p>
          <Button onClick={fetchCoursesWithoutLessons} variant="outline">
            <RefreshCw className="w-4 h-4 mr-2" />
            Scan Again
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <Card className="bg-gradient-to-r from-purple-500/20 via-blue-500/10 to-transparent">
        <CardContent className="p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 rounded-full bg-purple-500/20 flex items-center justify-center">
              <Brain className="w-6 h-6 text-purple-600" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">Gemini AI Lesson Generator</h1>
              <p className="text-muted-foreground">Automatically create comprehensive lessons for courses without content</p>
            </div>
          </div>
          
          <div className="grid grid-cols-3 gap-4 mt-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">{coursesWithoutLessons.length}</div>
              <div className="text-sm text-muted-foreground">Courses Need Lessons</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {coursesWithoutLessons.reduce((sum, course) => sum + course.duration_hours, 0)}h
              </div>
              <div className="text-sm text-muted-foreground">Content to Generate</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {Math.ceil(coursesWithoutLessons.reduce((sum, course) => sum + course.duration_hours * 1.5, 0))}
              </div>
              <div className="text-sm text-muted-foreground">Estimated Lessons</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generate All Button */}
      {coursesWithoutLessons.length > 0 && (
        <Card>
          <CardContent className="p-6 text-center">
            <div className="space-y-4">
              <div className="flex items-center justify-center gap-2 text-purple-600 mb-2">
                <Brain className="w-5 h-5" />
                <span className="font-semibold">Powered by Gemini AI</span>
              </div>
              
              <Button 
                onClick={generateAllLessons}
                disabled={isGenerating}
                size="lg"
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-3"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                    Generating Lessons with AI...
                  </>
                ) : (
                  <>
                    <Wand2 className="w-5 h-5 mr-2" />
                    Generate All Missing Lessons
                  </>
                )}
              </Button>
              
              <p className="text-sm text-muted-foreground">
                AI will create comprehensive lessons with videos, tutorials, quizzes, and exercises for all {coursesWithoutLessons.length} courses
              </p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Course Preview */}
      {coursesWithoutLessons.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Courses Awaiting AI-Generated Content</CardTitle>
            <p className="text-sm text-muted-foreground">
              These courses will receive comprehensive lessons generated by Gemini AI
            </p>
          </CardHeader>
          <CardContent className="space-y-3">
            {coursesWithoutLessons.slice(0, 10).map((course) => (
              <div 
                key={course.id} 
                className="p-4 rounded-lg border hover:bg-muted/50 transition-colors"
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h3 className="font-semibold">{course.title}</h3>
                      {course.is_featured && (
                        <Badge className="bg-yellow-500/10 text-yellow-600 border-yellow-500/20">
                          <Star className="w-3 h-3 mr-1" />
                          Featured
                        </Badge>
                      )}
                      <Badge className={getDifficultyColor(course.difficulty_level)}>
                        {course.difficulty_level}
                      </Badge>
                    </div>
                    
                    <p className="text-sm text-muted-foreground mb-2">{course.description}</p>
                    
                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      <span className="flex items-center gap-1">
                        <Clock className="w-3 h-3" />
                        {course.duration_hours}h
                      </span>
                      <span className="flex items-center gap-1">
                        <Users className="w-3 h-3" />
                        {course.instructor_name}
                      </span>
                      <span className="flex items-center gap-1">
                        <BookOpen className="w-3 h-3" />
                        Will generate ~{Math.ceil(course.duration_hours * 1.5)} lessons
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-1 text-purple-600">
                    <Zap className="w-4 h-4" />
                    <span className="text-xs">AI Ready</span>
                  </div>
                </div>
              </div>
            ))}
            
            {coursesWithoutLessons.length > 10 && (
              <div className="text-center text-sm text-muted-foreground pt-2">
                ... and {coursesWithoutLessons.length - 10} more courses
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Generation Results */}
      {generationResults && (
        <Card className="border-green-200">
          <CardHeader>
            <CardTitle className="text-green-600 flex items-center gap-2">
              <CheckCircle className="w-5 h-5" />
              AI Generation Complete
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-3 gap-4 mb-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{generationResults.successfullyGenerated}</div>
                <div className="text-sm text-muted-foreground">Courses Generated</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{generationResults.totalProcessed}</div>
                <div className="text-sm text-muted-foreground">Total Processed</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600">{generationResults.errors?.length || 0}</div>
                <div className="text-sm text-muted-foreground">Errors</div>
              </div>
            </div>
            
            <p className="text-green-600 font-medium">{generationResults.message}</p>
            
            {generationResults.errors && generationResults.errors.length > 0 && (
              <div className="mt-4">
                <h4 className="font-semibold text-red-600 mb-2">Errors:</h4>
                <div className="space-y-1">
                  {generationResults.errors.map((error: string, index: number) => (
                    <div key={index} className="text-sm text-red-600 bg-red-50 dark:bg-red-900/10 p-2 rounded">
                      {error}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
};